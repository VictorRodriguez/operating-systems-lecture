#include <sys/types.h>
#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <string.h>

						// Sebastian Pulido Espinoza A01642759
int main() {

	char userInput[100]; 
	int exit_bool = 0;

    while (1) {
        printf("user>");
        //printf("Ingresa un valor (presiona Enter para salir): ");
        if (scanf("%[^\n]%*c", userInput) == 1) { // esto si guarda el string escaneado en la variable
			////////////////////////////////////////////////////////////////////////////////////////////////
			//parsing del input
			char *tokens[100];
			int token_count = 0; 

			// Utiliza strtok para dividir la cadena en tokens usando el espacio como delimitador
			char *token = strtok(userInput, " ");
			while (token != NULL) {
				// Almacena el token en el arreglo de tokens
				tokens[token_count] = token;
				token_count++;

				// Obtiene el siguiente token
				token = strtok(NULL, " ");
			}

			///////////////////////////////////////////////////////////////////////////////////////////////
			if (strcmp(tokens[0], "exit") == 0) {
				/* child process */
				exit_bool = 1;
			}

			pid_t pid;
			/* fork a child process */
			pid = fork();
			if (pid < 0) {
				/* error occurred */
				fprintf(stderr, "Fork Failed");
				exit (-1) ;
			}

			else if (pid == 0 && strcmp(tokens[0], "cat") == 0) {
				/* child process */
				//execlp("/bin/ls","ls",NULL);
				if(tokens[1] == NULL){
					break;
				}
				execlp("cat","cat", tokens[1], NULL);
				
			}

			else if (pid == 0 && strcmp(tokens[0], "ls") == 0) {
				/* child process */
				execlp("/bin/ls","ls",tokens[1],NULL);
				
			}

			else if (pid == 0 && strcmp(tokens[0], "pwd") == 0) {
				/* child process */
				execlp("/bin/pwd","pwd",NULL);
			}

			else {
				/* parent process */
				/* parent will wait for the child to complete */
				wait(NULL);
				//printf("Comando no reconocido\n");
				//exit(0); 
				if(exit_bool == 1){
					exit(0);
				}
				if(tokens[1] != NULL){
					tokens[1] = NULL;
				}
			}
		}else{
			int c;
			while ((c = getchar()) != '\n' && c != EOF){} // esto borra el salto de linea del buffer para que scanf funcione otra vez
			continue;  // Si el usuario presiona Enter sin escribir nada, sale una nueva linea de comando
		}
    }
	
}
